"use strict"
var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t}
module.exports=function(t,e,r){var o=arguments.length
if(void 0===e&&(e=!0),r=r||"and",!Array.isArray(t))throw new TypeError("Expected input to be an array, got "+(void 0===t?"undefined":_typeof(t)))
if("boolean"!=typeof e)throw new TypeError("Expected oxford to be a boolean, got "+(void 0===e?"undefined":_typeof(e)))
if("string"!=typeof r)throw new TypeError("Expected join to be a string, got "+(void 0===r?"undefined":_typeof(r)))
var n=t.every(function(t){return"string"==typeof t})
if(n===!1)throw Error("Expected all elements of input array to be strings. Consider a map call to cast all elements to strings")
if(1!==o&&2!==o&&3!==o)throw Error("Expected 1, 2 or 3 arguments, got "+o)
var i=t.length
if(0===i)throw Error("Expected input array length >= 1, got "+t.length)
if(1===i)return""+t[0]
if(2===i)return t[0]+" "+r+" "+t[1]
for(var f=""+t[0],a=1;a<t.length;a++)f+=a<t.length-1?", "+t[a]:e===!0?", "+r+" "+t[a]:" "+r+" "+t[a]
return f}
